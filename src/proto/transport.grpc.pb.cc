// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transport.proto

#include "transport.pb.h"
#include "transport.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* RaftTransport_method_names[] = {
  "/RaftTransport/AppendEntriesPipeline",
  "/RaftTransport/AppendEntries",
  "/RaftTransport/RequestVote",
  "/RaftTransport/TimeoutNow",
  "/RaftTransport/InstallSnapshot",
};

std::unique_ptr< RaftTransport::Stub> RaftTransport::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RaftTransport::Stub> stub(new RaftTransport::Stub(channel, options));
  return stub;
}

RaftTransport::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AppendEntriesPipeline_(RaftTransport_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_AppendEntries_(RaftTransport_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestVote_(RaftTransport_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TimeoutNow_(RaftTransport_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstallSnapshot_(RaftTransport_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>* RaftTransport::Stub::AppendEntriesPipelineRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::AppendEntriesRequest, ::AppendEntriesResponse>::Create(channel_.get(), rpcmethod_AppendEntriesPipeline_, context);
}

void RaftTransport::Stub::async::AppendEntriesPipeline(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::AppendEntriesRequest,::AppendEntriesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::AppendEntriesRequest,::AppendEntriesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_AppendEntriesPipeline_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>* RaftTransport::Stub::AsyncAppendEntriesPipelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::AppendEntriesRequest, ::AppendEntriesResponse>::Create(channel_.get(), cq, rpcmethod_AppendEntriesPipeline_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>* RaftTransport::Stub::PrepareAsyncAppendEntriesPipelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::AppendEntriesRequest, ::AppendEntriesResponse>::Create(channel_.get(), cq, rpcmethod_AppendEntriesPipeline_, context, false, nullptr);
}

::grpc::Status RaftTransport::Stub::AppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::AppendEntriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AppendEntriesRequest, ::AppendEntriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

void RaftTransport::Stub::async::AppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest* request, ::AppendEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AppendEntriesRequest, ::AppendEntriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void RaftTransport::Stub::async::AppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest* request, ::AppendEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AppendEntriesResponse>* RaftTransport::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AppendEntriesResponse, ::AppendEntriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AppendEntries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AppendEntriesResponse>* RaftTransport::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendEntriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RaftTransport::Stub::RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::RequestVoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RequestVoteRequest, ::RequestVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestVote_, context, request, response);
}

void RaftTransport::Stub::async::RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RequestVoteRequest, ::RequestVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void RaftTransport::Stub::async::RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RequestVoteResponse>* RaftTransport::Stub::PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RequestVoteResponse, ::RequestVoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RequestVoteResponse>* RaftTransport::Stub::AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RaftTransport::Stub::TimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::TimeoutNowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TimeoutNowRequest, ::TimeoutNowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TimeoutNow_, context, request, response);
}

void RaftTransport::Stub::async::TimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest* request, ::TimeoutNowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TimeoutNowRequest, ::TimeoutNowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TimeoutNow_, context, request, response, std::move(f));
}

void RaftTransport::Stub::async::TimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest* request, ::TimeoutNowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TimeoutNow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TimeoutNowResponse>* RaftTransport::Stub::PrepareAsyncTimeoutNowRaw(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TimeoutNowResponse, ::TimeoutNowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TimeoutNow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TimeoutNowResponse>* RaftTransport::Stub::AsyncTimeoutNowRaw(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTimeoutNowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::InstallSnapshotRequest>* RaftTransport::Stub::InstallSnapshotRaw(::grpc::ClientContext* context, ::InstallSnapshotResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::InstallSnapshotRequest>::Create(channel_.get(), rpcmethod_InstallSnapshot_, context, response);
}

void RaftTransport::Stub::async::InstallSnapshot(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::ClientWriteReactor< ::InstallSnapshotRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::InstallSnapshotRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_InstallSnapshot_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::InstallSnapshotRequest>* RaftTransport::Stub::AsyncInstallSnapshotRaw(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::InstallSnapshotRequest>::Create(channel_.get(), cq, rpcmethod_InstallSnapshot_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::InstallSnapshotRequest>* RaftTransport::Stub::PrepareAsyncInstallSnapshotRaw(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::InstallSnapshotRequest>::Create(channel_.get(), cq, rpcmethod_InstallSnapshot_, context, response, false, nullptr);
}

RaftTransport::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftTransport_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RaftTransport::Service, ::AppendEntriesRequest, ::AppendEntriesResponse>(
          [](RaftTransport::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::AppendEntriesResponse,
             ::AppendEntriesRequest>* stream) {
               return service->AppendEntriesPipeline(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftTransport_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftTransport::Service, ::AppendEntriesRequest, ::AppendEntriesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RaftTransport::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AppendEntriesRequest* req,
             ::AppendEntriesResponse* resp) {
               return service->AppendEntries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftTransport_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftTransport::Service, ::RequestVoteRequest, ::RequestVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RaftTransport::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RequestVoteRequest* req,
             ::RequestVoteResponse* resp) {
               return service->RequestVote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftTransport_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftTransport::Service, ::TimeoutNowRequest, ::TimeoutNowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RaftTransport::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TimeoutNowRequest* req,
             ::TimeoutNowResponse* resp) {
               return service->TimeoutNow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftTransport_method_names[4],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RaftTransport::Service, ::InstallSnapshotRequest, ::InstallSnapshotResponse>(
          [](RaftTransport::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::InstallSnapshotRequest>* reader,
             ::InstallSnapshotResponse* resp) {
               return service->InstallSnapshot(ctx, reader, resp);
             }, this)));
}

RaftTransport::Service::~Service() {
}

::grpc::Status RaftTransport::Service::AppendEntriesPipeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AppendEntriesResponse, ::AppendEntriesRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftTransport::Service::AppendEntries(::grpc::ServerContext* context, const ::AppendEntriesRequest* request, ::AppendEntriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftTransport::Service::RequestVote(::grpc::ServerContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftTransport::Service::TimeoutNow(::grpc::ServerContext* context, const ::TimeoutNowRequest* request, ::TimeoutNowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftTransport::Service::InstallSnapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::InstallSnapshotRequest>* reader, ::InstallSnapshotResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


