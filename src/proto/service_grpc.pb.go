// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScoreClient is the client API for Score service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoreClient interface {
	AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error)
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
}

type scoreClient struct {
	cc grpc.ClientConnInterface
}

func NewScoreClient(cc grpc.ClientConnInterface) ScoreClient {
	return &scoreClient{cc}
}

func (c *scoreClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error) {
	out := new(AddRecordResponse)
	err := c.cc.Invoke(ctx, "/lazIR_tag.Score/AddRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, "/lazIR_tag.Score/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoreServer is the server API for Score service.
// All implementations must embed UnimplementedScoreServer
// for forward compatibility
type ScoreServer interface {
	AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error)
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	mustEmbedUnimplementedScoreServer()
}

// UnimplementedScoreServer must be embedded to have forward compatible implementations.
type UnimplementedScoreServer struct {
}

func (UnimplementedScoreServer) AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (UnimplementedScoreServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedScoreServer) mustEmbedUnimplementedScoreServer() {}

// UnsafeScoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoreServer will
// result in compilation errors.
type UnsafeScoreServer interface {
	mustEmbedUnimplementedScoreServer()
}

func RegisterScoreServer(s grpc.ServiceRegistrar, srv ScoreServer) {
	s.RegisterService(&Score_ServiceDesc, srv)
}

func _Score_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lazIR_tag.Score/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).AddRecord(ctx, req.(*AddRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Score_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoreServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lazIR_tag.Score/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoreServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Score_ServiceDesc is the grpc.ServiceDesc for Score service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Score_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lazIR_tag.Score",
	HandlerType: (*ScoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecord",
			Handler:    _Score_AddRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _Score_GetRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
