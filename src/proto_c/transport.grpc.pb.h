// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transport.proto
#ifndef GRPC_transport_2eproto__INCLUDED
#define GRPC_transport_2eproto__INCLUDED

#include "transport.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class RaftTransport final {
 public:
  static constexpr char const* service_full_name() {
    return "RaftTransport";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // AppendEntriesPipeline opens an AppendEntries message stream.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::AppendEntriesRequest, ::AppendEntriesResponse>> AppendEntriesPipeline(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::AppendEntriesRequest, ::AppendEntriesResponse>>(AppendEntriesPipelineRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AppendEntriesRequest, ::AppendEntriesResponse>> AsyncAppendEntriesPipeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AppendEntriesRequest, ::AppendEntriesResponse>>(AsyncAppendEntriesPipelineRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AppendEntriesRequest, ::AppendEntriesResponse>> PrepareAsyncAppendEntriesPipeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::AppendEntriesRequest, ::AppendEntriesResponse>>(PrepareAsyncAppendEntriesPipelineRaw(context, cq));
    }
    // AppendEntries performs a single append entries request / response.
    virtual ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::AppendEntriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesResponse>> AsyncAppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesResponse>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesResponse>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesResponse>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    // RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.
    virtual ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::RequestVoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteResponse>> AsyncRequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteResponse>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteResponse>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteResponse>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    // TimeoutNow is used to start a leadership transfer to the target node.
    virtual ::grpc::Status TimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::TimeoutNowResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TimeoutNowResponse>> AsyncTimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TimeoutNowResponse>>(AsyncTimeoutNowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TimeoutNowResponse>> PrepareAsyncTimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TimeoutNowResponse>>(PrepareAsyncTimeoutNowRaw(context, request, cq));
    }
    // InstallSnapshot is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::InstallSnapshotRequest>> InstallSnapshot(::grpc::ClientContext* context, ::InstallSnapshotResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::InstallSnapshotRequest>>(InstallSnapshotRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::InstallSnapshotRequest>> AsyncInstallSnapshot(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::InstallSnapshotRequest>>(AsyncInstallSnapshotRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::InstallSnapshotRequest>> PrepareAsyncInstallSnapshot(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::InstallSnapshotRequest>>(PrepareAsyncInstallSnapshotRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // AppendEntriesPipeline opens an AppendEntries message stream.
      virtual void AppendEntriesPipeline(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::AppendEntriesRequest,::AppendEntriesResponse>* reactor) = 0;
      // AppendEntries performs a single append entries request / response.
      virtual void AppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest* request, ::AppendEntriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest* request, ::AppendEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.
      virtual void RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TimeoutNow is used to start a leadership transfer to the target node.
      virtual void TimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest* request, ::TimeoutNowResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest* request, ::TimeoutNowResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // InstallSnapshot is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.
      virtual void InstallSnapshot(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::ClientWriteReactor< ::InstallSnapshotRequest>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::AppendEntriesRequest, ::AppendEntriesResponse>* AppendEntriesPipelineRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::AppendEntriesRequest, ::AppendEntriesResponse>* AsyncAppendEntriesPipelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::AppendEntriesRequest, ::AppendEntriesResponse>* PrepareAsyncAppendEntriesPipelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesResponse>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppendEntriesResponse>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteResponse>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RequestVoteResponse>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TimeoutNowResponse>* AsyncTimeoutNowRaw(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TimeoutNowResponse>* PrepareAsyncTimeoutNowRaw(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::InstallSnapshotRequest>* InstallSnapshotRaw(::grpc::ClientContext* context, ::InstallSnapshotResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::InstallSnapshotRequest>* AsyncInstallSnapshotRaw(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::InstallSnapshotRequest>* PrepareAsyncInstallSnapshotRaw(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>> AppendEntriesPipeline(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>>(AppendEntriesPipelineRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>> AsyncAppendEntriesPipeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>>(AsyncAppendEntriesPipelineRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>> PrepareAsyncAppendEntriesPipeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>>(PrepareAsyncAppendEntriesPipelineRaw(context, cq));
    }
    ::grpc::Status AppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::AppendEntriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendEntriesResponse>> AsyncAppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendEntriesResponse>>(AsyncAppendEntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendEntriesResponse>> PrepareAsyncAppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppendEntriesResponse>>(PrepareAsyncAppendEntriesRaw(context, request, cq));
    }
    ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::RequestVoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RequestVoteResponse>> AsyncRequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RequestVoteResponse>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RequestVoteResponse>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RequestVoteResponse>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    ::grpc::Status TimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::TimeoutNowResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TimeoutNowResponse>> AsyncTimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TimeoutNowResponse>>(AsyncTimeoutNowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TimeoutNowResponse>> PrepareAsyncTimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TimeoutNowResponse>>(PrepareAsyncTimeoutNowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::InstallSnapshotRequest>> InstallSnapshot(::grpc::ClientContext* context, ::InstallSnapshotResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::InstallSnapshotRequest>>(InstallSnapshotRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::InstallSnapshotRequest>> AsyncInstallSnapshot(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::InstallSnapshotRequest>>(AsyncInstallSnapshotRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::InstallSnapshotRequest>> PrepareAsyncInstallSnapshot(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::InstallSnapshotRequest>>(PrepareAsyncInstallSnapshotRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AppendEntriesPipeline(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::AppendEntriesRequest,::AppendEntriesResponse>* reactor) override;
      void AppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest* request, ::AppendEntriesResponse* response, std::function<void(::grpc::Status)>) override;
      void AppendEntries(::grpc::ClientContext* context, const ::AppendEntriesRequest* request, ::AppendEntriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestVote(::grpc::ClientContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest* request, ::TimeoutNowResponse* response, std::function<void(::grpc::Status)>) override;
      void TimeoutNow(::grpc::ClientContext* context, const ::TimeoutNowRequest* request, ::TimeoutNowResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InstallSnapshot(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::ClientWriteReactor< ::InstallSnapshotRequest>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>* AppendEntriesPipelineRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>* AsyncAppendEntriesPipelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::AppendEntriesRequest, ::AppendEntriesResponse>* PrepareAsyncAppendEntriesPipelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppendEntriesResponse>* AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppendEntriesResponse>* PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::AppendEntriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RequestVoteResponse>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RequestVoteResponse>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TimeoutNowResponse>* AsyncTimeoutNowRaw(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TimeoutNowResponse>* PrepareAsyncTimeoutNowRaw(::grpc::ClientContext* context, const ::TimeoutNowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::InstallSnapshotRequest>* InstallSnapshotRaw(::grpc::ClientContext* context, ::InstallSnapshotResponse* response) override;
    ::grpc::ClientAsyncWriter< ::InstallSnapshotRequest>* AsyncInstallSnapshotRaw(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::InstallSnapshotRequest>* PrepareAsyncInstallSnapshotRaw(::grpc::ClientContext* context, ::InstallSnapshotResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AppendEntriesPipeline_;
    const ::grpc::internal::RpcMethod rpcmethod_AppendEntries_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestVote_;
    const ::grpc::internal::RpcMethod rpcmethod_TimeoutNow_;
    const ::grpc::internal::RpcMethod rpcmethod_InstallSnapshot_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // AppendEntriesPipeline opens an AppendEntries message stream.
    virtual ::grpc::Status AppendEntriesPipeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::AppendEntriesResponse, ::AppendEntriesRequest>* stream);
    // AppendEntries performs a single append entries request / response.
    virtual ::grpc::Status AppendEntries(::grpc::ServerContext* context, const ::AppendEntriesRequest* request, ::AppendEntriesResponse* response);
    // RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.
    virtual ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response);
    // TimeoutNow is used to start a leadership transfer to the target node.
    virtual ::grpc::Status TimeoutNow(::grpc::ServerContext* context, const ::TimeoutNowRequest* request, ::TimeoutNowResponse* response);
    // InstallSnapshot is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.
    virtual ::grpc::Status InstallSnapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::InstallSnapshotRequest>* reader, ::InstallSnapshotResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendEntriesPipeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppendEntriesPipeline() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AppendEntriesPipeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntriesPipeline(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::AppendEntriesResponse, ::AppendEntriesRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntriesPipeline(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::AppendEntriesResponse, ::AppendEntriesRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppendEntries() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesRequest* /*request*/, ::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::AppendEntriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::AppendEntriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestVote() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RequestVoteRequest* /*request*/, ::RequestVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::RequestVoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::RequestVoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TimeoutNow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TimeoutNow() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TimeoutNow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimeoutNow(::grpc::ServerContext* /*context*/, const ::TimeoutNowRequest* /*request*/, ::TimeoutNowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTimeoutNow(::grpc::ServerContext* context, ::TimeoutNowRequest* request, ::grpc::ServerAsyncResponseWriter< ::TimeoutNowResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::InstallSnapshotRequest>* /*reader*/, ::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallSnapshot(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::InstallSnapshotResponse, ::InstallSnapshotRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AppendEntriesPipeline<WithAsyncMethod_AppendEntries<WithAsyncMethod_RequestVote<WithAsyncMethod_TimeoutNow<WithAsyncMethod_InstallSnapshot<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AppendEntriesPipeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AppendEntriesPipeline() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::AppendEntriesRequest, ::AppendEntriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->AppendEntriesPipeline(context); }));
    }
    ~WithCallbackMethod_AppendEntriesPipeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntriesPipeline(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::AppendEntriesResponse, ::AppendEntriesRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::AppendEntriesRequest, ::AppendEntriesResponse>* AppendEntriesPipeline(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AppendEntries() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::AppendEntriesRequest, ::AppendEntriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::AppendEntriesRequest* request, ::AppendEntriesResponse* response) { return this->AppendEntries(context, request, response); }));}
    void SetMessageAllocatorFor_AppendEntries(
        ::grpc::MessageAllocator< ::AppendEntriesRequest, ::AppendEntriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::AppendEntriesRequest, ::AppendEntriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesRequest* /*request*/, ::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::AppendEntriesRequest* /*request*/, ::AppendEntriesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestVote() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::RequestVoteRequest, ::RequestVoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RequestVoteRequest* request, ::RequestVoteResponse* response) { return this->RequestVote(context, request, response); }));}
    void SetMessageAllocatorFor_RequestVote(
        ::grpc::MessageAllocator< ::RequestVoteRequest, ::RequestVoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RequestVoteRequest, ::RequestVoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RequestVoteRequest* /*request*/, ::RequestVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::RequestVoteRequest* /*request*/, ::RequestVoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TimeoutNow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TimeoutNow() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::TimeoutNowRequest, ::TimeoutNowResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TimeoutNowRequest* request, ::TimeoutNowResponse* response) { return this->TimeoutNow(context, request, response); }));}
    void SetMessageAllocatorFor_TimeoutNow(
        ::grpc::MessageAllocator< ::TimeoutNowRequest, ::TimeoutNowResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TimeoutNowRequest, ::TimeoutNowResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TimeoutNow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimeoutNow(::grpc::ServerContext* /*context*/, const ::TimeoutNowRequest* /*request*/, ::TimeoutNowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TimeoutNow(
      ::grpc::CallbackServerContext* /*context*/, const ::TimeoutNowRequest* /*request*/, ::TimeoutNowResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::InstallSnapshotRequest, ::InstallSnapshotResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::InstallSnapshotResponse* response) { return this->InstallSnapshot(context, response); }));
    }
    ~WithCallbackMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::InstallSnapshotRequest>* /*reader*/, ::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::InstallSnapshotRequest>* InstallSnapshot(
      ::grpc::CallbackServerContext* /*context*/, ::InstallSnapshotResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AppendEntriesPipeline<WithCallbackMethod_AppendEntries<WithCallbackMethod_RequestVote<WithCallbackMethod_TimeoutNow<WithCallbackMethod_InstallSnapshot<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AppendEntriesPipeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppendEntriesPipeline() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AppendEntriesPipeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntriesPipeline(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::AppendEntriesResponse, ::AppendEntriesRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppendEntries() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesRequest* /*request*/, ::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestVote() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RequestVoteRequest* /*request*/, ::RequestVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TimeoutNow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TimeoutNow() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TimeoutNow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimeoutNow(::grpc::ServerContext* /*context*/, const ::TimeoutNowRequest* /*request*/, ::TimeoutNowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::InstallSnapshotRequest>* /*reader*/, ::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendEntriesPipeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppendEntriesPipeline() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AppendEntriesPipeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntriesPipeline(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::AppendEntriesResponse, ::AppendEntriesRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntriesPipeline(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppendEntries() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesRequest* /*request*/, ::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendEntries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestVote() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RequestVoteRequest* /*request*/, ::RequestVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TimeoutNow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TimeoutNow() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TimeoutNow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimeoutNow(::grpc::ServerContext* /*context*/, const ::TimeoutNowRequest* /*request*/, ::TimeoutNowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTimeoutNow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::InstallSnapshotRequest>* /*reader*/, ::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallSnapshot(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AppendEntriesPipeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AppendEntriesPipeline() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->AppendEntriesPipeline(context); }));
    }
    ~WithRawCallbackMethod_AppendEntriesPipeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntriesPipeline(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::AppendEntriesResponse, ::AppendEntriesRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* AppendEntriesPipeline(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AppendEntries() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AppendEntries(context, request, response); }));
    }
    ~WithRawCallbackMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesRequest* /*request*/, ::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppendEntries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestVote() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestVote(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RequestVoteRequest* /*request*/, ::RequestVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TimeoutNow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TimeoutNow() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TimeoutNow(context, request, response); }));
    }
    ~WithRawCallbackMethod_TimeoutNow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimeoutNow(::grpc::ServerContext* /*context*/, const ::TimeoutNowRequest* /*request*/, ::TimeoutNowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TimeoutNow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->InstallSnapshot(context, response); }));
    }
    ~WithRawCallbackMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::InstallSnapshotRequest>* /*reader*/, ::InstallSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* InstallSnapshot(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppendEntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AppendEntries() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AppendEntriesRequest, ::AppendEntriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::AppendEntriesRequest, ::AppendEntriesResponse>* streamer) {
                       return this->StreamedAppendEntries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AppendEntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppendEntries(::grpc::ServerContext* /*context*/, const ::AppendEntriesRequest* /*request*/, ::AppendEntriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendEntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AppendEntriesRequest,::AppendEntriesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestVote() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RequestVoteRequest, ::RequestVoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RequestVoteRequest, ::RequestVoteResponse>* streamer) {
                       return this->StreamedRequestVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RequestVoteRequest* /*request*/, ::RequestVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RequestVoteRequest,::RequestVoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TimeoutNow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TimeoutNow() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TimeoutNowRequest, ::TimeoutNowResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TimeoutNowRequest, ::TimeoutNowResponse>* streamer) {
                       return this->StreamedTimeoutNow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TimeoutNow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TimeoutNow(::grpc::ServerContext* /*context*/, const ::TimeoutNowRequest* /*request*/, ::TimeoutNowResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTimeoutNow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TimeoutNowRequest,::TimeoutNowResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_TimeoutNow<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AppendEntries<WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_TimeoutNow<Service > > > StreamedService;
};


#endif  // GRPC_transport_2eproto__INCLUDED
