// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_service_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_service_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_service_2eproto;
namespace lazIR_tag {
class AddRecordRequest;
struct AddRecordRequestDefaultTypeInternal;
extern AddRecordRequestDefaultTypeInternal _AddRecordRequest_default_instance_;
class AddRecordResponse;
struct AddRecordResponseDefaultTypeInternal;
extern AddRecordResponseDefaultTypeInternal _AddRecordResponse_default_instance_;
class GetRecordRequest;
struct GetRecordRequestDefaultTypeInternal;
extern GetRecordRequestDefaultTypeInternal _GetRecordRequest_default_instance_;
class GetRecordResponse;
struct GetRecordResponseDefaultTypeInternal;
extern GetRecordResponseDefaultTypeInternal _GetRecordResponse_default_instance_;
class GetRecordResponse_ScoreEntry_DoNotUse;
struct GetRecordResponse_ScoreEntry_DoNotUseDefaultTypeInternal;
extern GetRecordResponse_ScoreEntry_DoNotUseDefaultTypeInternal _GetRecordResponse_ScoreEntry_DoNotUse_default_instance_;
}  // namespace lazIR_tag
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace lazIR_tag {

// ===================================================================


// -------------------------------------------------------------------

class GetRecordResponse_ScoreEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          GetRecordResponse_ScoreEntry_DoNotUse, std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      GetRecordResponse_ScoreEntry_DoNotUse, std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  GetRecordResponse_ScoreEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetRecordResponse_ScoreEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GetRecordResponse_ScoreEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GetRecordResponse_ScoreEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GetRecordResponse_ScoreEntry_DoNotUse*>(
        &_GetRecordResponse_ScoreEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "lazIR_tag.GetRecordResponse.ScoreEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_service_2eproto;
};
// -------------------------------------------------------------------

class GetRecordRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:lazIR_tag.GetRecordRequest) */ {
 public:
  inline GetRecordRequest() : GetRecordRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRecordRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetRecordRequest(const GetRecordRequest& from)
      : GetRecordRequest(nullptr, from) {}
  GetRecordRequest(GetRecordRequest&& from) noexcept
    : GetRecordRequest() {
    *this = ::std::move(from);
  }

  inline GetRecordRequest& operator=(const GetRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordRequest& operator=(GetRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecordRequest* internal_default_instance() {
    return reinterpret_cast<const GetRecordRequest*>(
               &_GetRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetRecordRequest& a, GetRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecordRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecordRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetRecordRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetRecordRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lazIR_tag.GetRecordRequest";
  }
  protected:
  explicit GetRecordRequest(::google::protobuf::Arena* arena);
  GetRecordRequest(::google::protobuf::Arena* arena, const GetRecordRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lazIR_tag.GetRecordRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_service_2eproto;
};// -------------------------------------------------------------------

class AddRecordResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lazIR_tag.AddRecordResponse) */ {
 public:
  inline AddRecordResponse() : AddRecordResponse(nullptr) {}
  ~AddRecordResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddRecordResponse(::google::protobuf::internal::ConstantInitialized);

  inline AddRecordResponse(const AddRecordResponse& from)
      : AddRecordResponse(nullptr, from) {}
  AddRecordResponse(AddRecordResponse&& from) noexcept
    : AddRecordResponse() {
    *this = ::std::move(from);
  }

  inline AddRecordResponse& operator=(const AddRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordResponse& operator=(AddRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecordResponse* internal_default_instance() {
    return reinterpret_cast<const AddRecordResponse*>(
               &_AddRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddRecordResponse& a, AddRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecordResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecordResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddRecordResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddRecordResponse& from) {
    AddRecordResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddRecordResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lazIR_tag.AddRecordResponse";
  }
  protected:
  explicit AddRecordResponse(::google::protobuf::Arena* arena);
  AddRecordResponse(::google::protobuf::Arena* arena, const AddRecordResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitIndexFieldNumber = 1,
  };
  // uint64 commit_index = 1;
  void clear_commit_index() ;
  ::uint64_t commit_index() const;
  void set_commit_index(::uint64_t value);

  private:
  ::uint64_t _internal_commit_index() const;
  void _internal_set_commit_index(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:lazIR_tag.AddRecordResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t commit_index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};// -------------------------------------------------------------------

class AddRecordRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lazIR_tag.AddRecordRequest) */ {
 public:
  inline AddRecordRequest() : AddRecordRequest(nullptr) {}
  ~AddRecordRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddRecordRequest(::google::protobuf::internal::ConstantInitialized);

  inline AddRecordRequest(const AddRecordRequest& from)
      : AddRecordRequest(nullptr, from) {}
  AddRecordRequest(AddRecordRequest&& from) noexcept
    : AddRecordRequest() {
    *this = ::std::move(from);
  }

  inline AddRecordRequest& operator=(const AddRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRecordRequest& operator=(AddRecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRecordRequest* internal_default_instance() {
    return reinterpret_cast<const AddRecordRequest*>(
               &_AddRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddRecordRequest& a, AddRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRecordRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRecordRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRecordRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddRecordRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddRecordRequest& from) {
    AddRecordRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddRecordRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lazIR_tag.AddRecordRequest";
  }
  protected:
  explicit AddRecordRequest(::google::protobuf::Arena* arena);
  AddRecordRequest(::google::protobuf::Arena* arena, const AddRecordRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShooterFieldNumber = 1,
    kVictimFieldNumber = 2,
  };
  // string shooter = 1;
  void clear_shooter() ;
  const std::string& shooter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shooter(Arg_&& arg, Args_... args);
  std::string* mutable_shooter();
  PROTOBUF_NODISCARD std::string* release_shooter();
  void set_allocated_shooter(std::string* value);

  private:
  const std::string& _internal_shooter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shooter(
      const std::string& value);
  std::string* _internal_mutable_shooter();

  public:
  // string victim = 2;
  void clear_victim() ;
  const std::string& victim() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_victim(Arg_&& arg, Args_... args);
  std::string* mutable_victim();
  PROTOBUF_NODISCARD std::string* release_victim();
  void set_allocated_victim(std::string* value);

  private:
  const std::string& _internal_victim() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_victim(
      const std::string& value);
  std::string* _internal_mutable_victim();

  public:
  // @@protoc_insertion_point(class_scope:lazIR_tag.AddRecordRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr shooter_;
    ::google::protobuf::internal::ArenaStringPtr victim_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};// -------------------------------------------------------------------

class GetRecordResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lazIR_tag.GetRecordResponse) */ {
 public:
  inline GetRecordResponse() : GetRecordResponse(nullptr) {}
  ~GetRecordResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRecordResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetRecordResponse(const GetRecordResponse& from)
      : GetRecordResponse(nullptr, from) {}
  GetRecordResponse(GetRecordResponse&& from) noexcept
    : GetRecordResponse() {
    *this = ::std::move(from);
  }

  inline GetRecordResponse& operator=(const GetRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordResponse& operator=(GetRecordResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecordResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecordResponse* internal_default_instance() {
    return reinterpret_cast<const GetRecordResponse*>(
               &_GetRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetRecordResponse& a, GetRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecordResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecordResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRecordResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetRecordResponse& from) {
    GetRecordResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetRecordResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "lazIR_tag.GetRecordResponse";
  }
  protected:
  explicit GetRecordResponse(::google::protobuf::Arena* arena);
  GetRecordResponse(::google::protobuf::Arena* arena, const GetRecordResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 2,
    kReadAtIndexFieldNumber = 1,
  };
  // map<string, int32> score = 2;
  int score_size() const;
  private:
  int _internal_score_size() const;

  public:
  void clear_score() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& score() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_score();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_score() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_score();

  public:
  // uint64 read_at_index = 1;
  void clear_read_at_index() ;
  ::uint64_t read_at_index() const;
  void set_read_at_index(::uint64_t value);

  private:
  ::uint64_t _internal_read_at_index() const;
  void _internal_set_read_at_index(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:lazIR_tag.GetRecordResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<GetRecordResponse_ScoreEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        score_;
    ::uint64_t read_at_index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AddRecordRequest

// string shooter = 1;
inline void AddRecordRequest::clear_shooter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shooter_.ClearToEmpty();
}
inline const std::string& AddRecordRequest::shooter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lazIR_tag.AddRecordRequest.shooter)
  return _internal_shooter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddRecordRequest::set_shooter(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.shooter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lazIR_tag.AddRecordRequest.shooter)
}
inline std::string* AddRecordRequest::mutable_shooter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_shooter();
  // @@protoc_insertion_point(field_mutable:lazIR_tag.AddRecordRequest.shooter)
  return _s;
}
inline const std::string& AddRecordRequest::_internal_shooter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shooter_.Get();
}
inline void AddRecordRequest::_internal_set_shooter(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.shooter_.Set(value, GetArena());
}
inline std::string* AddRecordRequest::_internal_mutable_shooter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.shooter_.Mutable( GetArena());
}
inline std::string* AddRecordRequest::release_shooter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:lazIR_tag.AddRecordRequest.shooter)
  return _impl_.shooter_.Release();
}
inline void AddRecordRequest::set_allocated_shooter(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shooter_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.shooter_.IsDefault()) {
          _impl_.shooter_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lazIR_tag.AddRecordRequest.shooter)
}

// string victim = 2;
inline void AddRecordRequest::clear_victim() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.victim_.ClearToEmpty();
}
inline const std::string& AddRecordRequest::victim() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lazIR_tag.AddRecordRequest.victim)
  return _internal_victim();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddRecordRequest::set_victim(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.victim_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lazIR_tag.AddRecordRequest.victim)
}
inline std::string* AddRecordRequest::mutable_victim() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_victim();
  // @@protoc_insertion_point(field_mutable:lazIR_tag.AddRecordRequest.victim)
  return _s;
}
inline const std::string& AddRecordRequest::_internal_victim() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.victim_.Get();
}
inline void AddRecordRequest::_internal_set_victim(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.victim_.Set(value, GetArena());
}
inline std::string* AddRecordRequest::_internal_mutable_victim() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.victim_.Mutable( GetArena());
}
inline std::string* AddRecordRequest::release_victim() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:lazIR_tag.AddRecordRequest.victim)
  return _impl_.victim_.Release();
}
inline void AddRecordRequest::set_allocated_victim(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.victim_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.victim_.IsDefault()) {
          _impl_.victim_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lazIR_tag.AddRecordRequest.victim)
}

// -------------------------------------------------------------------

// AddRecordResponse

// uint64 commit_index = 1;
inline void AddRecordResponse::clear_commit_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.commit_index_ = ::uint64_t{0u};
}
inline ::uint64_t AddRecordResponse::commit_index() const {
  // @@protoc_insertion_point(field_get:lazIR_tag.AddRecordResponse.commit_index)
  return _internal_commit_index();
}
inline void AddRecordResponse::set_commit_index(::uint64_t value) {
  _internal_set_commit_index(value);
  // @@protoc_insertion_point(field_set:lazIR_tag.AddRecordResponse.commit_index)
}
inline ::uint64_t AddRecordResponse::_internal_commit_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.commit_index_;
}
inline void AddRecordResponse::_internal_set_commit_index(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.commit_index_ = value;
}

// -------------------------------------------------------------------

// GetRecordRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetRecordResponse

// uint64 read_at_index = 1;
inline void GetRecordResponse::clear_read_at_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.read_at_index_ = ::uint64_t{0u};
}
inline ::uint64_t GetRecordResponse::read_at_index() const {
  // @@protoc_insertion_point(field_get:lazIR_tag.GetRecordResponse.read_at_index)
  return _internal_read_at_index();
}
inline void GetRecordResponse::set_read_at_index(::uint64_t value) {
  _internal_set_read_at_index(value);
  // @@protoc_insertion_point(field_set:lazIR_tag.GetRecordResponse.read_at_index)
}
inline ::uint64_t GetRecordResponse::_internal_read_at_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.read_at_index_;
}
inline void GetRecordResponse::_internal_set_read_at_index(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.read_at_index_ = value;
}

// map<string, int32> score = 2;
inline int GetRecordResponse::_internal_score_size() const {
  return _internal_score().size();
}
inline int GetRecordResponse::score_size() const {
  return _internal_score_size();
}
inline void GetRecordResponse::clear_score() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.score_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& GetRecordResponse::_internal_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.score_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& GetRecordResponse::score() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:lazIR_tag.GetRecordResponse.score)
  return _internal_score();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* GetRecordResponse::_internal_mutable_score() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.score_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* GetRecordResponse::mutable_score() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:lazIR_tag.GetRecordResponse.score)
  return _internal_mutable_score();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace lazIR_tag


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_service_2eproto_2epb_2eh
