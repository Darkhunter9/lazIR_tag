// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace lazIR_tag {

static const char* Score_method_names[] = {
  "/lazIR_tag.Score/AddRecord",
  "/lazIR_tag.Score/GetRecord",
};

std::unique_ptr< Score::Stub> Score::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Score::Stub> stub(new Score::Stub(channel, options));
  return stub;
}

Score::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AddRecord_(Score_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecord_(Score_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Score::Stub::AddRecord(::grpc::ClientContext* context, const ::lazIR_tag::AddRecordRequest& request, ::lazIR_tag::AddRecordResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lazIR_tag::AddRecordRequest, ::lazIR_tag::AddRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddRecord_, context, request, response);
}

void Score::Stub::async::AddRecord(::grpc::ClientContext* context, const ::lazIR_tag::AddRecordRequest* request, ::lazIR_tag::AddRecordResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lazIR_tag::AddRecordRequest, ::lazIR_tag::AddRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRecord_, context, request, response, std::move(f));
}

void Score::Stub::async::AddRecord(::grpc::ClientContext* context, const ::lazIR_tag::AddRecordRequest* request, ::lazIR_tag::AddRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lazIR_tag::AddRecordResponse>* Score::Stub::PrepareAsyncAddRecordRaw(::grpc::ClientContext* context, const ::lazIR_tag::AddRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lazIR_tag::AddRecordResponse, ::lazIR_tag::AddRecordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lazIR_tag::AddRecordResponse>* Score::Stub::AsyncAddRecordRaw(::grpc::ClientContext* context, const ::lazIR_tag::AddRecordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Score::Stub::GetRecord(::grpc::ClientContext* context, const ::lazIR_tag::GetRecordRequest& request, ::lazIR_tag::GetRecordResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::lazIR_tag::GetRecordRequest, ::lazIR_tag::GetRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRecord_, context, request, response);
}

void Score::Stub::async::GetRecord(::grpc::ClientContext* context, const ::lazIR_tag::GetRecordRequest* request, ::lazIR_tag::GetRecordResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::lazIR_tag::GetRecordRequest, ::lazIR_tag::GetRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecord_, context, request, response, std::move(f));
}

void Score::Stub::async::GetRecord(::grpc::ClientContext* context, const ::lazIR_tag::GetRecordRequest* request, ::lazIR_tag::GetRecordResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lazIR_tag::GetRecordResponse>* Score::Stub::PrepareAsyncGetRecordRaw(::grpc::ClientContext* context, const ::lazIR_tag::GetRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::lazIR_tag::GetRecordResponse, ::lazIR_tag::GetRecordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::lazIR_tag::GetRecordResponse>* Score::Stub::AsyncGetRecordRaw(::grpc::ClientContext* context, const ::lazIR_tag::GetRecordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

Score::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Score_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Score::Service, ::lazIR_tag::AddRecordRequest, ::lazIR_tag::AddRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Score::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lazIR_tag::AddRecordRequest* req,
             ::lazIR_tag::AddRecordResponse* resp) {
               return service->AddRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Score_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Score::Service, ::lazIR_tag::GetRecordRequest, ::lazIR_tag::GetRecordResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Score::Service* service,
             ::grpc::ServerContext* ctx,
             const ::lazIR_tag::GetRecordRequest* req,
             ::lazIR_tag::GetRecordResponse* resp) {
               return service->GetRecord(ctx, req, resp);
             }, this)));
}

Score::Service::~Service() {
}

::grpc::Status Score::Service::AddRecord(::grpc::ServerContext* context, const ::lazIR_tag::AddRecordRequest* request, ::lazIR_tag::AddRecordResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Score::Service::GetRecord(::grpc::ServerContext* context, const ::lazIR_tag::GetRecordRequest* request, ::lazIR_tag::GetRecordResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lazIR_tag

